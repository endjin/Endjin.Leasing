// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Endjin.Leasing.Azure.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Leasable")]
    public partial class LeasableFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Leasable.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Leasable", "In order to avoid concurrency issues\nAs an actor in the system\nI want to have an " +
                    "exclusive lease on a long running task", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A single actor executes a long running task with duration less than the lease pol" +
            "icy")]
        [NUnit.Framework.CategoryAttribute("container")]
        [NUnit.Framework.CategoryAttribute("storage_emulator")]
        public virtual void ASingleActorExecutesALongRunningTaskWithDurationLessThanTheLeasePolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A single actor executes a long running task with duration less than the lease pol" +
                    "icy", new string[] {
                        "container",
                        "storage_emulator"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the long running task takes 5 seconds to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("the lease name is \"long-running-task\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I execute the task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("it should not throw any exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And("it should return successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("1 action(s) should have completed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A single actor executes a long running task with duration more than the lease pol" +
            "icy")]
        [NUnit.Framework.CategoryAttribute("container")]
        [NUnit.Framework.CategoryAttribute("storage_emulator")]
        public virtual void ASingleActorExecutesALongRunningTaskWithDurationMoreThanTheLeasePolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A single actor executes a long running task with duration more than the lease pol" +
                    "icy", new string[] {
                        "container",
                        "storage_emulator"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("the long running task takes 70 seconds to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.And("the lease name is \"long-running-task\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.When("I execute the task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("it should not throw any exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
 testRunner.And("it should return successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("1 action(s) should have completed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Actor A attempts to execute a long running task whilst Actor B is currently runni" +
            "ng the task")]
        [NUnit.Framework.CategoryAttribute("container")]
        [NUnit.Framework.CategoryAttribute("storage_emulator")]
        public virtual void ActorAAttemptsToExecuteALongRunningTaskWhilstActorBIsCurrentlyRunningTheTask()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Actor A attempts to execute a long running task whilst Actor B is currently runni" +
                    "ng the task", new string[] {
                        "container",
                        "storage_emulator"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("the long running task takes 20 seconds to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And("the lease name is \"long-running-task\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("actor B is currently running the task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("Actor A executes the task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("it should not throw any exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.And("it should return successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("2 action(s) should have completed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Actor A attempts to execute a long running task with a do not retry policy and a " +
            "linear retry strategy, whilst Actor B is currently running the task")]
        [NUnit.Framework.CategoryAttribute("container")]
        [NUnit.Framework.CategoryAttribute("storage_emulator")]
        public virtual void ActorAAttemptsToExecuteALongRunningTaskWithADoNotRetryPolicyAndALinearRetryStrategyWhilstActorBIsCurrentlyRunningTheTask()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Actor A attempts to execute a long running task with a do not retry policy and a " +
                    "linear retry strategy, whilst Actor B is currently running the task", new string[] {
                        "container",
                        "storage_emulator"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("the long running task takes 20 seconds to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.And("the lease name is \"long-running-task\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("the lease duration is 40 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("we use a do not retry policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("we use a linear retry strategy with periodicity of 10 seconds and 10 max retries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("actor B is currently running the task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.When("Actor A executes the task with options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("it should not throw any exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.And("it should return unsuccessfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("after 20 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("1 action(s) should have completed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Actor A attempts to execute a long running task with a do not retry on lease acqu" +
            "isition unsuccessful policy and a linear retry strategy, whilst Actor B is curre" +
            "ntly running the task")]
        [NUnit.Framework.CategoryAttribute("container")]
        [NUnit.Framework.CategoryAttribute("storage_emulator")]
        public virtual void ActorAAttemptsToExecuteALongRunningTaskWithADoNotRetryOnLeaseAcquisitionUnsuccessfulPolicyAndALinearRetryStrategyWhilstActorBIsCurrentlyRunningTheTask()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Actor A attempts to execute a long running task with a do not retry on lease acqu" +
                    "isition unsuccessful policy and a linear retry strategy, whilst Actor B is curre" +
                    "ntly running the task", new string[] {
                        "container",
                        "storage_emulator"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("the long running task takes 20 seconds to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("the lease name is \"long-running-task\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And("the lease duration is 40 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("we use a do not retry on lease acquisition unsuccessful policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("we use a linear retry strategy with periodicity of 10 seconds and 10 max retries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("actor B is currently running the task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.When("Actor A executes the task with options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("it should not throw any exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.And("it should return unsuccessfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("after 20 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("1 action(s) should have completed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A single actor executes a long running task with a retry until lease acquired pol" +
            "icy and no retry strategy")]
        [NUnit.Framework.CategoryAttribute("container")]
        [NUnit.Framework.CategoryAttribute("storage_emulator")]
        public virtual void ASingleActorExecutesALongRunningTaskWithARetryUntilLeaseAcquiredPolicyAndNoRetryStrategy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A single actor executes a long running task with a retry until lease acquired pol" +
                    "icy and no retry strategy", new string[] {
                        "container",
                        "storage_emulator"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("the long running task takes 5 seconds to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.And("the lease name is \"long-running-task\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("the lease duration is 40 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("we use a do not retry on lease acquisition unsuccessful policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("we use no retry strategy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("I execute the task with options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("it should throw an AggregateException containing NullReferenceException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A single actor executes a long running task with no retry policy and a linear ret" +
            "ry strategy")]
        [NUnit.Framework.CategoryAttribute("container")]
        [NUnit.Framework.CategoryAttribute("storage_emulator")]
        public virtual void ASingleActorExecutesALongRunningTaskWithNoRetryPolicyAndALinearRetryStrategy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A single actor executes a long running task with no retry policy and a linear ret" +
                    "ry strategy", new string[] {
                        "container",
                        "storage_emulator"});
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("the long running task takes 5 seconds to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.And("the lease name is \"long-running-task\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("the lease duration is 40 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("we use no lease policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("we use a linear retry strategy with periodicity of 10 seconds and 10 max retries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.When("I execute the task with options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("it should throw an AggregateException containing NullReferenceException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A single actor executes a long running task with no lease policy")]
        [NUnit.Framework.CategoryAttribute("container")]
        [NUnit.Framework.CategoryAttribute("storage_emulator")]
        public virtual void ASingleActorExecutesALongRunningTaskWithNoLeasePolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A single actor executes a long running task with no lease policy", new string[] {
                        "container",
                        "storage_emulator"});
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.When("I execute the task with options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then("it should throw an AggregateException containing NullReferenceException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
